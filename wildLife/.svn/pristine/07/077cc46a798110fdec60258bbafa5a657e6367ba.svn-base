package com.globits.wl.service.impl;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.joda.time.LocalDateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import com.globits.core.service.impl.GenericServiceImpl;
import com.globits.security.domain.User;
import com.globits.wl.domain.AdministrativeOrganization;
import com.globits.wl.domain.FmsAdministrativeUnit;
import com.globits.wl.domain.FmsOrganizationAdministrative;
import com.globits.wl.dto.AdministrativeOrganizationDto;
import com.globits.wl.dto.FmsOrganizationAdministrativeDto;
import com.globits.wl.repository.AdministrativeOrganizationRepository;
import com.globits.wl.repository.FmsAdministrativeUnitRepository;
import com.globits.wl.repository.FmsOrganizationAdministrativeRepository;
import com.globits.wl.service.AdministrativeOrganizationService;
import com.globits.wl.service.UserAdministrativeUnitService;

@Service
public class AdministrativeOrganizationServiceImpl extends GenericServiceImpl<AdministrativeOrganization, Long>
		implements AdministrativeOrganizationService {
	@Autowired
	AdministrativeOrganizationRepository admindao;
	@Autowired
	FmsAdministrativeUnitRepository fmsunitdao;
	@Autowired
	FmsOrganizationAdministrativeRepository fmsadmindao;
	@Autowired
	private UserAdministrativeUnitService userAdministrativeUnitService;

	@Override
	public AdministrativeOrganizationDto save(AdministrativeOrganizationDto dto) {
		AdministrativeOrganization entity = null;
		Boolean isEdit = false;
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User modifiedUser = null;
		LocalDateTime currentDate = LocalDateTime.now();
		String currentUserName = "Unknown User";
		if (authentication != null) {
			modifiedUser = (User) authentication.getPrincipal();
			currentUserName = modifiedUser.getUsername();
		}
		if (entity == null) {
			entity = new AdministrativeOrganization();
			entity.setCreateDate(currentDate);
			entity.setCreatedBy(currentUserName);
		}
		if (dto.getOrganizationLevel() != null) {
			entity.setOrganizationLevel(dto.getOrganizationLevel());
		}
		if (dto.getName() != null) {
			entity.setName(dto.getName());
		}
		if (dto.getAbbreviations() != null) {
			entity.setAbbreviations(dto.getAbbreviations());
		}
		if (dto.getAddress() != null) {
			entity.setAddress(dto.getAddress());
		}
		if (dto.getGovernmentLevel() != null) {
			entity.setGovernmentLevel(dto.getGovernmentLevel());
		}
		if (dto.getOrganizationalForm() != null) {
			entity.setOrganizationalForm(dto.getOrganizationalForm());
		}
		if (dto.getEmail() != null) {
			entity.setEmail(dto.getEmail());
		}
		if (dto.getPhoneNumber() != null) {
			entity.setPhoneNumber(dto.getPhoneNumber());
		}
		if (dto.getFax() != null) {
			entity.setFax(dto.getFax());
		}
		if (dto.getWebsite() != null) {
			entity.setWebsite(dto.getWebsite());
		}
		if (dto.getNumericalOrder() != null) {
			entity.setNumericalOrder(dto.getNumericalOrder());
		}
		if (dto.getParent() != null) {
			AdministrativeOrganization parent = null;
			if (dto.getParent().getId() != null) {
				parent = this.admindao.findOne(dto.getParent().getId());
			} else if (dto.getParent().getEmail() != null) {
				List<AdministrativeOrganization> aus = this.admindao
						.findListByabbreviations(dto.getParent().getAbbreviations());
				if (aus != null && aus.size() == 1) {
					parent = aus.get(0);
				} else if (aus != null && aus.size() > 1) {
					for (AdministrativeOrganization x : aus) {
						if (x.getName().equals(dto.getParent().getName()))
							;
						parent = x;
						break;
					}
				}

			}

			if (parent != null) {
				entity.setParent(parent);

				if (parent.getOrganizationLevel() != null && parent.getOrganizationLevel() > 0) {
					entity.setOrganizationLevel(parent.getOrganizationLevel());
				}
			}
		} else {
			entity.setOrganizationLevel(1);
			entity.setParent(null);
		}
		this.admindao.save(entity);
		dto.setId(entity.getId());
		return dto;

	}

	@Override
	public AdministrativeOrganizationDto update(AdministrativeOrganizationDto dto, Long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public AdministrativeOrganizationDto delete(AdministrativeOrganizationDto dto, Long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<AdministrativeOrganizationDto> getAllByParentId(Long parentId) {
		if (parentId != null) {
			List<Long> listWard = new ArrayList<Long>();
			List<Long> ListDistrict = new ArrayList<Long>();
			List<Long> ListProvince = new ArrayList<Long>();
			String sql = "select new com.globits.wl.dto.AdministrativeOrganizationDto(a,true) from AdministrativeOrganization a where a.parent.id=:parentId";
//List<AdministrativeOrganization>lstAdministrativeOrganizations=userAdministrativeUnitService.getAdministrativeUnitByLoginUser();
		}
		return null;
	}

	@Override
	public List<AdministrativeOrganizationDto> getChildrenByParentId(Long parentId) {
		// TODO Auto-generated method stub
		return null;
	}

}
