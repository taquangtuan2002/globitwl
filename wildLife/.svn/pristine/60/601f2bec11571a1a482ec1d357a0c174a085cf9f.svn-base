package com.globits.wl.service.impl;

import com.globits.wl.dto.functiondto.SearchReportForm16Dto;
import com.globits.wl.dto.report.ReportForm16ForExcelDto;
import com.globits.wl.service.ExportForm16Service;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.hibernate.transform.AliasToBeanResultTransformer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.List;

@Service
public class ExportForm16ServiceImpl implements ExportForm16Service {

	private final Logger LOGGER = LoggerFactory.getLogger(ExportForm16ServiceImpl.class);

	@Autowired
	public EntityManager manager;

	@Autowired
	ResourceLoader resourceLoader;

	@Override
	public Workbook getReportForm16(SearchReportForm16Dto search) {
		List<ReportForm16ForExcelDto> data = this.getDataForExcel(search);
		List<ReportForm16ForExcelDto> animals = this.getDataAnimalForExcel(search);
		return writeDataToWorkBook(data, animals, search);
	}
	@Override
	public List<ReportForm16ForExcelDto> getDataAnimalForExcel(SearchReportForm16Dto search) {
		StringBuilder whereBuilder = new StringBuilder();

		if (!ObjectUtils.isEmpty(search.getProvinceId())) {
			whereBuilder.append(" and prov.id = :provinceId ");
		}
		if (!ObjectUtils.isEmpty(search.getDateReport())) {
			whereBuilder.append(" and f16.date_report  <= :dateReport ");
		}
		if (!ObjectUtils.isEmpty(search.getDistrictId())) {
			whereBuilder.append(" and dis.id  = :districtId ");
		}
		if (!ObjectUtils.isEmpty(search.getWardId())) {
			whereBuilder.append(" and w.id  = :wardId ");
		}

		String sql = "select distinct tb1.animalId, tb1.animalName " + "from (\n"
				+ "         select ROW_NUMBER() OVER (PARTITION BY f16.farm_id,f16.animal_id ORDER BY f16.date_report,f16.modify_date,f16.create_date DESC )\n"
				+ "                                         AS rowNumber,\n"
				+ "                f16.animal_id            as animalId,\n"
				+ "                ta.name                  as animalName\n"
				+ "         from tbl_report_form16 as f16\n"
				+ "                  INNER JOIN tbl_report_period p ON f16.report_period_id = p.id\n"
				+ "                  inner join tbl_animal ta on f16.animal_id = ta.id\n"
				+ "                  INNER JOIN tbl_fms_administrative_unit prov ON prov.id = p.province_id AND prov.parent_id IS NULL\n"
				+ "                  INNER JOIN tbl_fms_administrative_unit dis ON dis.id = p.district_id AND dis.parent_id IS NOT NULL\n"
				+ "                  INNER JOIN tbl_fms_administrative_unit w\n"
				+ "                             ON w.id = p.administrative_unit_id AND w.parent_id IS NOT NULL\n"
				+ "         where ta.cites is not null and ta.code != ''\n" + "           and f16.total <> 0\n"
				+ whereBuilder + "     ) as tb1\n" + "where tb1.rowNumber = 1\n" ;

		Query query = manager.createNativeQuery(sql).unwrap(org.hibernate.query.Query.class)
				.setResultTransformer(new AliasToBeanResultTransformer(ReportForm16ForExcelDto.class));
		if (!ObjectUtils.isEmpty(search.getProvinceId())) {
			query.setParameter("provinceId", search.getProvinceId());
		}
		if (!ObjectUtils.isEmpty(search.getDateReport())) {
			query.setParameter("dateReport", search.getDateReport());
		}
		if (!ObjectUtils.isEmpty(search.getDistrictId())) {
			query.setParameter("districtId", search.getDistrictId());
		}
		if (!ObjectUtils.isEmpty(search.getWardId())) {
			query.setParameter("wardId", search.getWardId());
		}
		List<ReportForm16ForExcelDto> rs = (List<ReportForm16ForExcelDto>) query.getResultList();
		return rs;
	}

	private List<ReportForm16ForExcelDto> getDataForExcel(SearchReportForm16Dto search) {
		StringBuilder whereBuilder = new StringBuilder();

		if (!ObjectUtils.isEmpty(search.getProvinceId())) {
			whereBuilder.append(" and prov.id = :provinceId ");
		}
		if (!ObjectUtils.isEmpty(search.getDateReport())) {
			whereBuilder.append(" and f16.date_report  <= :dateReport ");
		}
		if (!ObjectUtils.isEmpty(search.getDistrictId())) {
			whereBuilder.append(" and dis.id  = :districtId ");
		}
		if (!ObjectUtils.isEmpty(search.getWardId())) {
			whereBuilder.append(" and w.id  = :wardId ");
		}

		String sql = "select *\n" + "from (\n"
				+ "         select ROW_NUMBER() OVER (PARTITION BY f16.farm_id,f16.animal_id ORDER BY f16.date_report,f16.modify_date,f16.create_date DESC )\n"
				+ "                                         AS rowNumber,\n"
				+ "                tf.id                    as farmId,\n"
				+ "                tf.name                  as farmName,\n"
				+ "                tf.adress_detail         as addressDetails,\n"
				+ "                prov.id                  as provinceId,\n"
				+ "                prov.name                as provinceName,\n"
				+ "                dis.id                   as districtId,\n"
				+ "                dis.name                 as districtName,\n"
				+ "                w.id                     as communeId,\n"
				+ "                w.name                   as communeName,\n"
				+ "                tf.new_registration_code as newRegistrationCode,\n"
				+ "                tf.date_registration     as dateRegistration,\n"
				+ "                tf.phone_number          as phoneNumber,\n"
				+ "                f16.date_report          as importExportDate,\n"
				+ "                f16.total                as total,\n"
				+ "                f16.note                 as note,\n"
				+ "                f16.animal_id            as animalId,\n"
				+ "                ta.name                  as animalName,\n"
				+ "                ta.science_name          as animalScienceName,\n"
				+ "                tac.code                 as certificate,\n"
				+ "                tac.dateIssue            as registerDate \n"
				+ "         from tbl_report_form16 as f16\n"
				+ "                  INNER JOIN tbl_report_period p ON f16.report_period_id = p.id\n"
				+ "                  inner join tbl_animal ta on f16.animal_id = ta.id\n"
				+ "                  inner join tbl_farm tf on f16.farm_id = tf.id\n"
				+ "                  left join tbl_animal_certificate tac on tf.id = tac.farm_id\n"
				+ "                  INNER JOIN tbl_fms_administrative_unit prov ON prov.id = p.province_id AND prov.parent_id IS NULL\n"
				+ "                  INNER JOIN tbl_fms_administrative_unit dis ON dis.id = p.district_id AND dis.parent_id IS NOT NULL\n"
				+ "                  INNER JOIN tbl_fms_administrative_unit w\n"
				+ "                             ON w.id = p.administrative_unit_id AND w.parent_id IS NOT NULL\n"
				+ "         where ta.cites is not null and ta.code != ''\n" + "           and f16.total <> 0\n"
				+ whereBuilder + "     ) as tb1\n" + "where tb1.rowNumber = 1\n" + "order by tb1.farmId, tb1.animalId";

		Query query = manager.createNativeQuery(sql).unwrap(org.hibernate.query.Query.class)
				.setResultTransformer(new AliasToBeanResultTransformer(ReportForm16ForExcelDto.class));
		if (!ObjectUtils.isEmpty(search.getProvinceId())) {
			query.setParameter("provinceId", search.getProvinceId());
		}
		if (!ObjectUtils.isEmpty(search.getDateReport())) {
			query.setParameter("dateReport", search.getDateReport());
		}
		if (!ObjectUtils.isEmpty(search.getDistrictId())) {
			query.setParameter("districtId", search.getDistrictId());
		}
		if (!ObjectUtils.isEmpty(search.getWardId())) {
			query.setParameter("wardId", search.getWardId());
		}
		List<ReportForm16ForExcelDto> rs = (List<ReportForm16ForExcelDto>) query.getResultList();
		return rs;
	}

	private Workbook writeDataToWorkBook(List<ReportForm16ForExcelDto> data, List<ReportForm16ForExcelDto> animals,
			SearchReportForm16Dto search) {
		Workbook workBook = null;
		try (InputStream template = resourceLoader.getResource("classpath:template/excel/BC1_3.xlsx")
				.getInputStream()) {
			workBook = new XSSFWorkbook(template);
		} catch (IOException e) {
			LOGGER.error("Error reading workbook");
		}

		if (workBook == null) {
			throw new RuntimeException();
		}
		
		Font font = workBook.createFont();
		font.setFontName("Times New Roman");
		font.setFontHeightInPoints((short)11);

		Font fontBoldTitle = workBook.createFont();
		font.setFontName("Times New Roman");
		fontBoldTitle.setBold(true);
		fontBoldTitle.setFontHeightInPoints((short)11);

		CellStyle titleCellStyle =  workBook.createCellStyle();
		titleCellStyle.setFont(fontBoldTitle);

		CellStyle tableHeadCellStyle = workBook.createCellStyle();
		tableHeadCellStyle.setFont(font);
		Sheet sheet =  workBook.getSheetAt(0);
		int columnCount = 15;
		Row row;
		Cell cell;
		if(!CollectionUtils.isEmpty(data)){
			row = sheet.getRow(1);
			cell = row.getCell(0);
			cell.setCellValue(cell.getStringCellValue()+" "+ data.get(0).getProvinceName());
		}
		row = sheet.getRow(7);
		for (ReportForm16ForExcelDto animal : animals) {
			cell=row.createCell(columnCount++);
			cell.setCellStyle(titleCellStyle);
			try {
				cell.setCellValue(animal.getAnimalName());
			}catch (Exception e) {
				cell.setCellValue("");
			}
		}
		cell = row.createCell(columnCount++);
		cell.setCellStyle(titleCellStyle);
		cell.setCellValue("Đánh dấu mẫu vật");
		cell = row.createCell(columnCount++);
		cell.setCellStyle(titleCellStyle);
		cell.setCellValue("Nguồn gốc");
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		int rownum = 8;// vị trí bắt đầu sét dữ liệu
		int stt = 1;
		int cellNum= 0;
		for (ReportForm16ForExcelDto dto : data) {
			row = sheet.createRow(rownum++);
			cellNum = 0;
			if(row !=null){
				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				cell.setCellValue(stt++);

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getFarmName());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getAddressDetails());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getCommuneName());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getDistrictName());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getNewRegistrationCode());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getPhoneNumber());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(sdf.format(dto.getDateRegistration()) );
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(sdf.format(dto.getImportExportDate()));
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getAnimalName());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getAnimalScienceName());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getTotal());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getNote());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(dto.getCertificate());
				}catch (Exception e){
					cell.setCellValue("");
				}

				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue(sdf.format(dto.getRegisterDate()));
				}catch (Exception e){
					cell.setCellValue("");
				}
				for (ReportForm16ForExcelDto animal : animals) {
					cell=row.createCell(cellNum++);
					cell.setCellStyle(tableHeadCellStyle);
					if(animal.getAnimalId().equals(dto.getAnimalId())){
						cell.setCellValue(dto.getTotal());
					}else{
						cell.setCellValue("");
					}
				}
				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue("");
				}catch (Exception e){
					cell.setCellValue("");
				}
				cell = row.createCell(cellNum++);
				cell.setCellStyle(tableHeadCellStyle);
				try{
					cell.setCellValue("");
				}catch (Exception e){
					cell.setCellValue("");
				}

			}
//			// tt
//			row.createCell(0).setCellValue(dto.getAnimalId() + "");
//			// hoten
//			row.createCell(1).setCellValue(dto.getFarmName());
//			// diachi
//			row.createCell(2).setCellValue(dto.getAddressDetails());
//			// xa
//			row.createCell(3).setCellValue(dto.getCommuneName());
//			// huyen
//			row.createCell(4).setCellValue(dto.getDistrictName());
//			// macsn
//			row.createCell(5).setCellValue(dto.getFarmId() + "");
//			// dt
//			row.createCell(6).setCellValue(dto.getPhoneNumber() + "");
//			// ngàycap
//			row.createCell(7).setCellValue(dto.getDateRegistration());
//			// ngãyuatnhap
//			row.createCell(8).setCellValue(dto.getImportExportDate());
//			// loai
//			row.createCell(9).setCellValue(dto.getAnimalName());
//			// tenkh
//			row.createCell(10).setCellValue(dto.getAnimalScienceName());
//			// soluong
//			row.createCell(11).setCellValue(dto.getTotal());
//			// ghichu
//			row.createCell(12).setCellValue(dto.getNote());
//			// giấycn
//			row.createCell(13).setCellValue(dto.getCertificate());
//			// ngyacapgiaycn
//			row.createCell(14).setCellValue(dto.getRegisterDate());

		}
//
//		try {// Write the output to a file
//			FileOutputStream fileOut = new FileOutputStream("BC1_3.xlsx");
//			workBook.write(fileOut);
//
//		} catch (Exception e) {
//		}

		return workBook;
	}

}
