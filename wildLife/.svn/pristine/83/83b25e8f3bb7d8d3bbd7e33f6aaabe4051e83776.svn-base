package com.globits.wl.service.impl;

import com.globits.wl.dto.functiondto.*;

import com.globits.core.utils.SecurityUtils;
import com.globits.security.domain.User;
import com.globits.wl.dto.DashboardVolatilityDto;
import com.globits.wl.service.DashboardService;
import com.globits.wl.service.UserAdministrativeUnitService;
import com.globits.wl.utils.NumberUtils;
import com.globits.wl.utils.WLConstant;

import com.globits.wl.utils.WLDateTimeUtil;
import com.google.common.base.MoreObjects;
import org.apache.commons.lang3.ObjectUtils;
import org.joda.time.LocalDate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

@Service
public class DashboardServiceImpl implements DashboardService {
    @Autowired
    public EntityManager manager;
	@Autowired
	private UserAdministrativeUnitService userAdministrativeUnitService;

    public Long totalSpeciesNumberPLI(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select count(DISTINCT entity.animal.id) from ReportForm16 as entity where entity.cites ='I' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            Integer currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalSpeciesNumberPLII(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select count(DISTINCT entity.animal.id) from ReportForm16 as entity where entity.cites ='II' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalSpeciesNumberPLIII(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select count(DISTINCT entity.animal.id) from ReportForm16 as entity where entity.cites ='III' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalSpeciesNumberDVHD(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select count(DISTINCT entity.animal.id) from ReportForm16 as entity where entity.cites ='' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalFarmsNumberPLI(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select count(DISTINCT entity.farm.id) from ReportForm16 as entity where entity.cites ='I' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalFarmsNumberPLII(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select count(DISTINCT entity.farm.id) from ReportForm16 as entity where entity.cites ='II' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalFarmsNumberPLIII(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select count(DISTINCT entity.farm.id) from ReportForm16 as entity where entity.cites ='III' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalFarmsNumberDVHD(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select count(DISTINCT entity.farm.id) from ReportForm16 as entity where entity.cites ='' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalAnimalsNumberPLI(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select sum( entity.total) from ReportForm16 as entity where entity.cites ='I' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalAnimalsNumberPLII(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select sum( entity.total) from ReportForm16 as entity where entity.cites ='II' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalAnimalsNumberPLIII(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select sum( entity.total) from ReportForm16 as entity where entity.cites ='III' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalAnimalsNumberDVHD(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select sum( entity.total) from ReportForm16 as entity where entity.cites ='' ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long)qCount.getSingleResult();
        return count;
    }
    public Long totalAnimalsNumber(Integer year) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String countSql = "select count(Distinct entity.animal.id) from ReportForm16  as entity where (1=1) ";
        String whereClause = "";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }else{
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        countSql += whereClause;
        Query qCount = manager.createQuery(countSql);
        if (year != null) {
            qCount.setParameter("year",year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            qCount.setParameter("year",currentYear);
        }
        if(!isAdmin) {
            qCount.setParameter("listWardId", listWardId);
        }
        Long count = (Long) qCount.getSingleResult();
        return count;
    }

    @Override
    public DashboardCitesDto Cites(SearchDto searchDto){
        DashboardCitesDto dashboardCitesDto = new DashboardCitesDto();
        if (totalSpeciesNumberPLI(searchDto.getYear()) != null) {
            dashboardCitesDto.setSpeciesNumberPLI(NumberUtils.convertNumberToString(totalSpeciesNumberPLI(searchDto.getYear())));
        }else{
            dashboardCitesDto.setSpeciesNumberPLI("0");
        }
        if (totalSpeciesNumberPLII(searchDto.getYear()) != null) {
            dashboardCitesDto.setSpeciesNumberPLII(NumberUtils.convertNumberToString(totalSpeciesNumberPLII(searchDto.getYear())));
        }else{
            dashboardCitesDto.setSpeciesNumberPLII("0");
        }
        if (totalSpeciesNumberPLIII(searchDto.getYear()) != null) {
            dashboardCitesDto.setSpeciesNumberPLIII(NumberUtils.convertNumberToString(totalSpeciesNumberPLIII(searchDto.getYear())));
        }else{
            dashboardCitesDto.setSpeciesNumberPLIII("0");
        }
        if (totalSpeciesNumberDVHD(searchDto.getYear()) != null) {
            dashboardCitesDto.setSpeciesNumberDVHD(NumberUtils.convertNumberToString(totalSpeciesNumberDVHD(searchDto.getYear())));
        }else{
            dashboardCitesDto.setSpeciesNumberDVHD("0");
        }
        if (totalFarmsNumberPLI(searchDto.getYear()) != null) {
            dashboardCitesDto.setFarmsNumberPLI(NumberUtils.convertNumberToString(totalFarmsNumberPLI(searchDto.getYear())));
        }else{
            dashboardCitesDto.setFarmsNumberPLII("0");
        }
        if (totalFarmsNumberPLII(searchDto.getYear()) != null) {
            dashboardCitesDto.setFarmsNumberPLII(NumberUtils.convertNumberToString(totalFarmsNumberPLII(searchDto.getYear())));
        }else{
            dashboardCitesDto.setFarmsNumberPLII("0");
        }
        if (totalFarmsNumberPLIII(searchDto.getYear()) != null) {
            dashboardCitesDto.setFarmsNumberPLIII(NumberUtils.convertNumberToString(totalFarmsNumberPLIII(searchDto.getYear())));
        }else{
            dashboardCitesDto.setFarmsNumberPLIII("0");
        }
        if (totalFarmsNumberDVHD(searchDto.getYear()) != null) {
            dashboardCitesDto.setFarmsNumberDVHD(NumberUtils.convertNumberToString(totalFarmsNumberDVHD(searchDto.getYear())));
        }else{
            dashboardCitesDto.setFarmsNumberDVHD("0");
        }
        if(totalAnimalsNumberPLI(searchDto.getYear()) != null) {
            dashboardCitesDto.setAnimalsNumberPLI(NumberUtils.convertNumberToString(totalAnimalsNumberPLI(searchDto.getYear())));
        }else{
            dashboardCitesDto.setAnimalsNumberPLI("0");
        }
        if(totalAnimalsNumberPLII(searchDto.getYear()) != null) {
            dashboardCitesDto.setAnimalsNumberPLII(NumberUtils.convertNumberToString(totalAnimalsNumberPLII(searchDto.getYear())));
        }else{
            dashboardCitesDto.setAnimalsNumberPLII("0");
        }
        if(totalAnimalsNumberPLIII(searchDto.getYear()) != null) {
            dashboardCitesDto.setAnimalsNumberPLIII(NumberUtils.convertNumberToString(totalAnimalsNumberPLIII(searchDto.getYear())));
        }else{
            dashboardCitesDto.setAnimalsNumberPLIII("0");
        }
        if(totalAnimalsNumberDVHD(searchDto.getYear()) != null) {
            dashboardCitesDto.setAnimalsNumberDVHD(NumberUtils.convertNumberToString(totalAnimalsNumberDVHD(searchDto.getYear())));
        }else{
            dashboardCitesDto.setAnimalsNumberDVHD("0");
        }
        if (totalAnimalsNumber(searchDto.getYear())!= null) {
            dashboardCitesDto.setAnimalNumber(NumberUtils.convertNumberToString(totalAnimalsNumber(searchDto.getYear())));
        }else{
            dashboardCitesDto.setAnimalNumber("0");
        }
        long totalAnimal = 0;
        long totalFarm = 0;
        long totalSpecies = 0;
        if (totalAnimalsNumberPLI(searchDto.getYear()) != null) {
            totalAnimal += totalAnimalsNumberPLI(searchDto.getYear());
        }
        if (totalAnimalsNumberPLII(searchDto.getYear())!= null){
            totalAnimal += totalAnimalsNumberPLII(searchDto.getYear());
        }
        if (totalAnimalsNumberPLIII(searchDto.getYear()) != null) {
            totalAnimal += totalAnimalsNumberPLIII(searchDto.getYear());
        }
        if (totalAnimalsNumberDVHD(searchDto.getYear()) != null) {
            totalAnimal += totalAnimalsNumberDVHD(searchDto.getYear());
        }
        if (totalFarmsNumberPLI(searchDto.getYear()) != null){
            totalFarm += totalFarmsNumberPLI(searchDto.getYear());
        }
        if (totalFarmsNumberPLII(searchDto.getYear()) != null){
            totalFarm += totalFarmsNumberPLII(searchDto.getYear());
        }
        if (totalFarmsNumberPLIII(searchDto.getYear()) != null){
            totalFarm += totalFarmsNumberPLIII(searchDto.getYear());
        }
        if (totalFarmsNumberDVHD(searchDto.getYear()) != null){
            totalFarm += totalFarmsNumberDVHD(searchDto.getYear());
        }
        if (totalSpeciesNumberPLI(searchDto.getYear()) != null){
            totalSpecies += totalSpeciesNumberPLI(searchDto.getYear());
        }
        if (totalSpeciesNumberPLII(searchDto.getYear()) != null){
            totalSpecies += totalSpeciesNumberPLII(searchDto.getYear());
        }
        if (totalSpeciesNumberPLIII(searchDto.getYear()) != null){
            totalSpecies += totalSpeciesNumberPLIII(searchDto.getYear());
        }
        if (totalSpeciesNumberDVHD(searchDto.getYear()) != null){
            totalSpecies += totalSpeciesNumberDVHD(searchDto.getYear());
        }
        dashboardCitesDto.setTotalAnimal(NumberUtils.convertNumberToString(totalAnimal));
        dashboardCitesDto.setTotalFarm(NumberUtils.convertNumberToString(totalFarm));
        dashboardCitesDto.setTotalSpecies(NumberUtils.convertNumberToString(totalSpecies));

        if(farmProvidedCodeInYearNumberOfCites(searchDto.getYear()) != null) {
            dashboardCitesDto.setFarmProvidedCodeInYearNumber(NumberUtils.convertNumberToString(farmProvidedCodeInYearNumberOfCites(searchDto.getYear())));
        }else{
            dashboardCitesDto.setFarmProvidedCodeInYearNumber("0");
        }
        if(totalFarmProvidedCodeNumberOfCites(searchDto.getYear()) != null) {
            dashboardCitesDto.setFarmProvidedCodeNumber(NumberUtils.convertNumberToString(totalFarmProvidedCodeNumberOfCites(searchDto.getYear())));
        }else{
            dashboardCitesDto.setFarmProvidedCodeNumber("0");
        }

        return dashboardCitesDto;
    }

    public Long totalFarmsNumber(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String qCount = " select count(entity)from Farm entity where entity.name is not null and entity.isDuplicate is null ";
        String whereClause = " ";
        if (year != null){
            whereClause += "AND entity.yearRegistration =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        qCount += whereClause;
        Query query = manager.createQuery(qCount);
        if (year != null) {
            query.setParameter("year",Integer.toString(year));
        }
        if(!isAdmin) {
            query.setParameter("listWardId", listWardId);
        }
        Long count = (Long)query.getSingleResult();
        return count;
    }
    public Long totalFarmsNeedProvidedCodeNumber(Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String qCount = " select count(DISTINCT entity.farm.id)from ReportForm16 as entity where  (entity.cites = 'II' or entity.vnlist06 = 'IIB') ";
        String whereClause = " ";
        if (year != null){
            whereClause += "AND  year(entity.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        qCount += whereClause;
        Query query = manager.createQuery(qCount);
        if (year != null) {
            query.setParameter("year", year);
        }
        if(!isAdmin) {
            query.setParameter("listWardId", listWardId);
        }
        Long count = (Long)query.getSingleResult();
        return count;
    }
    public Long totalFarmProvidedCodeNumber (Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String qCount = " select count(DISTINCT entity.id)from Farm as entity inner join ReportForm16 as f16 on f16.farm.id = entity.id  where (f16.cites = 'II' or f16.vnlist06 = 'IIB') and entity.dateRegistration is not null and entity.name is not null and entity.isDuplicate is null  ";
        String whereClause = " ";
        if (year != null) {
            whereClause += " AND year(f16.dateReport) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        qCount += whereClause;
        Query query = manager.createQuery(qCount);
        if (year != null) {
            query.setParameter("year", year);
        }
        if(!isAdmin) {
            query.setParameter("listWardId", listWardId);
        }
        Long count = (Long)query.getSingleResult();
        return count;
    }
    public Long totalFarmProvidedCodeNumberOfCites (Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String qCount = " select count(DISTINCT entity.id)from Farm as entity inner join ReportForm16 as f16 on f16.farm.id = entity.id  where f16.cites = 'II'  and entity.dateRegistration is not null and entity.name is not null and entity.isDuplicate is null  ";
        String whereClause = " ";
//        if (year != null) {
//            whereClause += " AND year(f16.dateReport) =:year";
//        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        qCount += whereClause;
        Query query = manager.createQuery(qCount);
//        if (year != null) {
//            query.setParameter("year", year);
//        }
        if(!isAdmin) {
            query.setParameter("listWardId", listWardId);
        }
        Long count = (Long)query.getSingleResult();
        return count;
    }
    @Override
    public Long farmProvidedCodeInYearNumber (SearchDto searchDto){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String qCount = " select count(entity)from Farm entity  where entity.dateRegistration is not null and entity.name is not null and entity.isDuplicate is null ";
        String whereClause = " ";
        if (searchDto.getYear() != null) {
            whereClause += " AND year(entity.dateRegistration) =:year";
        }else{
            whereClause += " AND year(entity.dateRegistration) =:year";
        }
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        qCount += whereClause;
        Query query = manager.createQuery(qCount);
        if (searchDto.getYear() != null) {
            query.setParameter("year", searchDto.getYear());
        }else{
            Date date = new Date();
            Integer year = WLDateTimeUtil.getYear(date);
            query.setParameter("year", year);
        }
        if(!isAdmin) {
            query.setParameter("listWardId", listWardId);
        }
        Long count = (Long)query.getSingleResult();
        return count;
    }
    public Long farmProvidedCodeInYearNumberOfCites (Integer year){
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String qCount = " select count(entity.id)from Farm entity inner join ReportForm16 as f16 on f16.farm.id = entity.id  where entity.dateRegistration  is not null and entity.name is not null and entity.isDuplicate is null and f16.cites = 'II' ";
        String whereClause = " ";
        whereClause += " AND year(entity.dateRegistration) =:year";
        if(!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        qCount += whereClause;
        Query query = manager.createQuery(qCount);
        if (year != null) {
            query.setParameter("year", year);
        }else{
            Date date = new Date();
            Integer currentYear = WLDateTimeUtil.getYear(date);
            query.setParameter("year", year);
        }
        if(!isAdmin) {
            query.setParameter("listWardId", listWardId);
        }
        Long count = (Long)query.getSingleResult();
        return count;
    }
    @Override
    public DashboardFarmDto getFarm(SearchDto searchDto){
        DashboardFarmDto dashBoardFarmDto = new DashboardFarmDto();
        dashBoardFarmDto.setFarmsNumber(totalFarmsNumber(searchDto.getYear()));
        dashBoardFarmDto.setFarmProvidedCodeNumber(totalFarmProvidedCodeNumber(searchDto.getYear()));
        dashBoardFarmDto.setFarmsNeedProvidedCodeNumber(totalFarmsNeedProvidedCodeNumber(searchDto.getYear()));
        Float a = (float)totalFarmProvidedCodeNumber(searchDto.getYear());
        Float b = (float)totalFarmsNeedProvidedCodeNumber(searchDto.getYear());
        Float farmProvidedCodePercent = (a/b)*100;
        dashBoardFarmDto.setFarmProvidedCodePercent((float)Math.ceil(farmProvidedCodePercent * 10) / 10);
        return dashBoardFarmDto;
    }
    @Override
    public DashboardVolatilityDto Volatility(SearchReportForm16Dto searchDto) {

		DashboardVolatilityDto dashBoardVolatilityDto = new DashboardVolatilityDto();
		
			dashBoardVolatilityDto.setTotalListOfForestProductsByYear(totalListOfForestProductsByYear(searchDto.getYear()));//bản ghi lâm sản trong năm;
		
		dashBoardVolatilityDto.setIncreaseVolatilityOfTheBase(mostRecentTotalase(searchDto.getYear()) - farthestTotalBase(searchDto.getYear()));// tăng cơ sở
		dashBoardVolatilityDto.setIncreasedVariationOfTheIndividual(currentNumberOfIndividuals(searchDto.getYear()) - numberOfIndividualsFirst(searchDto.getYear()));// tăng cá thể
																													
		dashBoardVolatilityDto.setDecreasedVolatilityOfTheBase(farthestTotalBase(searchDto.getYear()) - mostRecentTotalase(searchDto.getYear()));// giam cơ sở 
		dashBoardVolatilityDto.setDecreasedIndividualVariability(numberOfIndividualsFirst(searchDto.getYear()) - currentNumberOfIndividuals(searchDto.getYear()));// giảm cá thể
																													
																													
		dashBoardVolatilityDto.setChangesInTotalHouseholds(Math.abs(totalNumberOfCurrentRecords(searchDto.getYear()) - totalNumberOfPreviousRecords(searchDto.getYear()))); // biến động cơ sở upadte
		dashBoardVolatilityDto.setExportListOfForestProducts(ExportListOfForestProducts(searchDto.getYear()));//xuat bang ke lam san
		
		dashBoardVolatilityDto.setTotalEstablishmentStopsFarming(TotalEstablishmentStopsFarming(searchDto.getYear()));// so cơ sở ngừng gây nuôi 
		dashBoardVolatilityDto.setRegistrationFacilityInTheYear(RegistrationFacilityInTheYear(searchDto.getYear()));	//số cơ sở đang ký nuôi mới
		dashBoardVolatilityDto.setImportListOfForestProducts(importListOfForestProducts(searchDto.getYear()));//nhập bảng kê lâm sản
		return dashBoardVolatilityDto;
	}
    public Long totalListOfForestProductsByYear(Integer year) {

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP ) || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_SDAH );
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String qCount = "select count(rp) from ForestProductsList rp where (1=1)";
		String where = "";

		if (year != null) {
			where += " AND year(rp.modifyDate) = :year";
		}else {
			where += " AND year(rp.modifyDate) = :year";
		}
		if (!isAdmin) {
			where += " AND rp.administrativeUnitFrom.id in :listWardId";
		}
		qCount += where;
		Query q = manager.createQuery(qCount);
		if (year != null) {
			q.setParameter("year", year);
		}else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
		}
		if (!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}

	

	public Long mostRecentTotalase(Integer year) {
		
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String qCount = "select count(DISTINCT rp.farm.id) from ReportForm16 rp where (1=1)";
		String where = "";
		if (year != null) {
			where += " AND  year(rp.modifyDate) = :year";
		}else {
			where += " AND  year(rp.modifyDate) = :year";
		}
		if (!isAdmin) {
			where += " AND rp.administrativeUnit.id in :listWardId";
		}
		qCount += where;
		Query q = manager.createQuery(qCount);
		if (year != null) {
			q.setParameter("year", year);
		}else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
		}
		if (!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}

	public Long farthestTotalBase(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String qCount = "select count(DISTINCT rp.farm.id) from ReportForm16 rp where (1=1)";
		String where = "";
		if (year != null) {
			where += " AND  year(rp.dateReport) = :year ";
		}else {
			where += " AND  year(rp.dateReport) = :year ";
		}
		if (!isAdmin) {
			where += " AND rp.administrativeUnit.id in :listWardId";
		}
		qCount += where;
		Query q = manager.createQuery(qCount);
		if (year != null) {
			q.setParameter("year", year);
		}else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
		}
		if (!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}

	public Long currentNumberOfIndividuals(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}

		String qCount = "select count(rp.total) from ReportForm16 rp where (1=1)";
		String where = "";
		if (year != null) {
			where += " AND year(rp.modifyDate) = :year ";
		}else {
			where += " AND year(rp.modifyDate) = :year ";
		}
		if (!isAdmin) {
			where += " AND rp.administrativeUnit.id in :listWardId";
		}
		qCount += where;
		Query q = manager.createQuery(qCount);
		if (year != null) {
			q.setParameter("year", year);
		}else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
		}
		if (!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}

	public Long numberOfIndividualsFirst(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}

		String qCount = "select count(rp.total) from ReportForm16 rp where (1=1)";
		String where = " ";
		if (year != null) {
			where += " AND year(rp.dateReport) = :year ";
		}else {
			where += " AND year(rp.dateReport) = :year ";
		}
		if (!isAdmin) {
			where += " AND rp.administrativeUnit.id in :listWardId";
		}
		qCount += where;
		Query q = manager.createQuery(qCount);
		if (year != null) {
			q.setParameter("year", year);
		}else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
		}
		if (!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;

	}

	public Long totalNumberOfCurrentRecords(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String qCount = "select count(DISTINCT rp.farm.id) from ReportForm16 rp where (1=1)";
		String where = "";
		if (year != null) {
			where += "  AND year(rp.modifyDate) = :year ";
		}else {
			where += "  AND year(rp.modifyDate) = :year ";
		}
		if (!isAdmin) {
			where += " AND rp.administrativeUnit.id in :listWardId";
		}
		qCount += where;
		Query q = manager.createQuery(qCount);
		if (year != null) {
			q.setParameter("year", year);
		}else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
		}
		if (!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;

	}

	public Long totalNumberOfPreviousRecords(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String qCount = "select count(DISTINCT rp.farm.id) from ReportForm16 rp where (1=1)";
		String where = "";
		
		if (year != null) {
			where += " AND year(rp.dateReport) = :year";
		}else {
			where += " AND year(rp.dateReport) = :year";
		}
		if (!isAdmin) {
			where += " AND rp.administrativeUnit.id in :listWardId";
		}
		qCount += where;
		Query q = manager.createQuery(qCount);
		if (year != null) {
			q.setParameter("year", year);
		}else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
		}
		if (!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;

	}
	
	public Long ExportListOfForestProducts(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP ) || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_SDAH );
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String qCount = "select count(f.canceled) from ForestProductsList f where f.canceled = 3 ";
		String where = "";
		
		if (year != null) {
			where += " AND  year(f.modifyDate) = :year";
		}else {
			where += " AND  year(f.modifyDate) = :year";
		}
		if (!isAdmin) {
			where += " AND f.administrativeUnitFrom.id in :listWardId";
		}
		
		qCount += where;
		Query q = manager.createQuery(qCount);
		if (year != null) {
			q.setParameter("year", year);
		}else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
		}
		if (!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long TotalEstablishmentStopsFarming(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "select count(re.farm) from ReportForm16 re where (re.male + re.female + unGender) = 0  ";
		String whereClause = "";
		if(year !=null) {
			whereClause += " AND year(re.modifyDate) = :year";
		}else {
			whereClause += " AND year(re.modifyDate) = :year";
		}
		if(!isAdmin) {
			whereClause += " AND re.administrativeUnit.id in :listWardId";
		}
		
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long RegistrationFacilityInTheYear(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP) || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_SDAH );
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "select count( f.status) from Farm f where f.status =3  ";
		String whereClause = "";
		if (year !=null) {
			whereClause += " AND year(f.dateRegistration) = :year";			
		}else {
			whereClause += " AND year(f.dateRegistration) = :year";		
		}
	
		if(!isAdmin) {
			whereClause += " AND f.ownerAdministrativeUnit.id in :listWardId";
		}
		
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	
	public Long importListOfForestProducts(Integer year) {

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP ) || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_SDAH );
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String qCount = "select count(im.forestProductsList) from ImportExportAnimal im where im.type = 1";
		String where = "";

		if (year != null) {
			where += " AND year(im.modifyDate) = :year";
		}else {
			where += " AND year(im.modifyDate) = :year";
		}
		if (!isAdmin) {
			where += " AND im.province.id in :listWardId";
		}
		qCount += where;
		Query q = manager.createQuery(qCount);
		if (year != null) {
			q.setParameter("year", year);
		}
		else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
		}
		if (!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	

//	 Dashboard phân nhóm theo NĐCP start
	public Long getNumberSpeciesIB(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Count(DISTINCT entity.animal.id) From ReportForm16 entity "
				+ " Where entity.vnlist06 = 'IB' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberFarmIB(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Count(DISTINCT entity.farm.id) From ReportForm16 entity "
				+ " Where entity.vnlist06 = 'IB' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";

		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberIndividualIB(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Sum(entity.total) From ReportForm16 entity "
				+ " Where entity.vnlist06 = 'IB' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberSpeciesIIB(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Count(DISTINCT entity.animal.id) From ReportForm16 entity "
				+ " Where entity.vnlist06 = 'IIB' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberFarmIIB(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Count(DISTINCT entity.farm.id) From ReportForm16 entity "
				+ " Where entity.vnlist06 = 'IIB' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberIndividualIIB(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Sum(entity.total) From ReportForm16 entity "
				+ " Where entity.vnlist06 = 'IIB' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberSpeciesDVRTT(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Count(DISTINCT entity.animal.id) From ReportForm16 entity "
				+ " Where entity.vnlist06 = 'DVRTT' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberFarmDVRTT(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Count(DISTINCT entity.farm.id) From ReportForm16 entity "
				+ " Where entity.vnlist06 = 'DVRTT' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberIndividualDVRTT(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Sum(entity.total) From ReportForm16 entity "
				+ " Where entity.vnlist06 = 'DVRTT' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberSpecies(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Count(DISTINCT entity.animal.id) From ReportForm16 entity "
				+ " Where entity.vnlist06 = '' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberFarm(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Count(DISTINCT entity.farm.id) From ReportForm16 entity "
				+ " Where entity.vnlist06 = '' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
	
	public Long getNumberIndividual(Integer year) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		User currentUser = null;
		if (authentication != null) {
			currentUser = (User) authentication.getPrincipal();
		}
		boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
				|| SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
		List<Long> listWardId = null;
		if (!isAdmin) {
			listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
			if (listWardId == null || listWardId.size() == 0) {
				return null;
			}
		}
		String sql = "Select Sum(entity.total) From ReportForm16 entity "
				+ " Where entity.vnlist06 = '' ";
		String whereClause = "";
		whereClause += " AND Year(entity.dateReport) = :year";
		if(!isAdmin) {
			whereClause += " AND entity.administrativeUnit.id in :listWardId";
		}
		sql += whereClause;
		Query q = manager.createQuery(sql);
		if(year != null) {
			q.setParameter("year", year);
        }else{
            Date date = new Date();
            int currentYear = WLDateTimeUtil.getYear(date);
            q.setParameter("year",currentYear);
        }
		if(!isAdmin) {
			q.setParameter("listWardId", listWardId);
		}
		Long result = (Long) q.getSingleResult();
		return result;
	}
    public Long totalFarmProvidedCodeNumberOfGoverment(Integer year) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String qCount = " select count(DISTINCT entity.id)from Farm as entity inner join ReportForm16 as f16 on f16.farm.id = entity.id  where f16.vnlist06 = 'IIB'  and entity.dateRegistration is not null and entity.name is not null and entity.isDuplicate is null  ";
        String whereClause = " ";
        //        if (year != null) {
        //            whereClause += " AND year(f16.dateReport) =:year";
        //        }
        if (!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        qCount += whereClause;
        Query query = manager.createQuery(qCount);
        //        if (year != null) {
        //            query.setParameter("year", year);
        //        }
        if (!isAdmin) {
            query.setParameter("listWardId", listWardId);
        }
        Long count = (Long) query.getSingleResult();
        return count;
    }

    public Long farmProvidedCodeInYearNumberOfGoverment(Integer year) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser = null;
        if (authentication != null) {
            currentUser = (User) authentication.getPrincipal();
        }
        boolean isAdmin = SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_ADMIN)
                || SecurityUtils.isUserInRole(currentUser, WLConstant.ROLE_DLP);
        List<Long> listWardId = null;
        if (!isAdmin) {
            listWardId = userAdministrativeUnitService.getListWardIdByLoginUser();
            if (listWardId == null || listWardId.size() == 0) {
                return null;
            }
        }
        String qCount = " select count(entity.id)from Farm entity inner join ReportForm16 as f16 on f16.farm.id = entity.id  where entity.dateRegistration  is not null and entity.name is not null and entity.isDuplicate is null and f16.vnlist06 = 'IIB' ";
        String whereClause = " ";
        whereClause += " AND year(entity.dateRegistration) =:year";
        if (!isAdmin) {
            whereClause += " AND entity.administrativeUnit.id in :listWardId";
        }
        qCount += whereClause;
        Query query = manager.createQuery(qCount);
        if (year != null) {
            query.setParameter("year", year);
        } else {
            Date date = new Date();
            Integer currentYear = WLDateTimeUtil.getYear(date);
            query.setParameter("year", year);
        }
        if (!isAdmin) {
            query.setParameter("listWardId", listWardId);
        }
        Long count = (Long) query.getSingleResult();
        return count;
    }

    @Override
    public DashboardGovermentDecreeDto getNumberGovermentDecree(SearchReportForm16Dto searchDto) {
        DashboardGovermentDecreeDto dto = new DashboardGovermentDecreeDto();
        if (getNumberSpeciesIB(searchDto.getYear()) != null) {
            dto.setNumberSpeciesIB(NumberUtils.convertNumberToString(getNumberSpeciesIB(searchDto.getYear())));
        } else {
            dto.setNumberSpeciesIB("0");
        }
        if (getNumberFarmIB(searchDto.getYear()) != null) {
            dto.setNumberFarmIB(NumberUtils.convertNumberToString(getNumberFarmIB(searchDto.getYear())));
        } else {
            dto.setNumberFarmIB("0");
        }
        if (getNumberIndividualIB(searchDto.getYear()) != null) {
            dto.setNumberIndividualIB(NumberUtils.convertNumberToString(getNumberIndividualIB(searchDto.getYear())));
        } else {
            dto.setNumberIndividualIB("0");
        }

        if (getNumberSpeciesIIB(searchDto.getYear()) != null) {
            dto.setNumberSpeciesIIB(NumberUtils.convertNumberToString(getNumberSpeciesIIB(searchDto.getYear())));
        } else {
            dto.setNumberSpeciesIIB("0");
        }
        if (getNumberFarmIIB(searchDto.getYear()) != null) {
            dto.setNumberFarmIIB(NumberUtils.convertNumberToString(getNumberFarmIIB(searchDto.getYear())));
        } else {
            dto.setNumberFarmIIB("0");
        }
        if (getNumberIndividualIIB(searchDto.getYear()) != null) {
            dto.setNumberIndividualIIB(NumberUtils.convertNumberToString(getNumberIndividualIIB(searchDto.getYear())));
        } else {
            dto.setNumberIndividualIIB("0");
        }

        if (getNumberSpeciesDVRTT(searchDto.getYear()) != null) {
            dto.setNumberSpeciesDVRTT(NumberUtils.convertNumberToString(getNumberSpeciesDVRTT(searchDto.getYear())));
        } else {
            dto.setNumberSpeciesDVRTT("0");
        }
        if (getNumberFarmDVRTT(searchDto.getYear()) != null) {
            dto.setNumberFarmDVRTT(NumberUtils.convertNumberToString(getNumberFarmDVRTT(searchDto.getYear())));
        } else {
            dto.setNumberFarmDVRTT("0");
        }

        if (getNumberIndividualDVRTT(searchDto.getYear()) != null) {
            dto.setNumberIndividualDVRTT(NumberUtils.convertNumberToString(getNumberIndividualDVRTT(searchDto.getYear())));
        } else {
            dto.setNumberIndividualDVRTT("0");
        }

        if (getNumberSpecies(searchDto.getYear()) != null) {
            dto.setNumberSpecies(NumberUtils.convertNumberToString(getNumberSpecies(searchDto.getYear())));
        } else {
            dto.setNumberSpecies("0");
        }
        if (getNumberFarm(searchDto.getYear()) != null) {
            dto.setNumberFarm(NumberUtils.convertNumberToString(getNumberFarm(searchDto.getYear())));
        } else {
            dto.setNumberFarm("0");
        }
        if (getNumberIndividual(searchDto.getYear()) != null) {
            dto.setNumberIndividual(NumberUtils.convertNumberToString(getNumberIndividual(searchDto.getYear())));
        } else {
            dto.setNumberIndividual("0");
        }
        long totalIndividual = 0;
        long totalFarm = 0;
        long totalSpecies = 0;
        if (getNumberIndividualIB(searchDto.getYear()) != null) {
            totalIndividual += getNumberIndividualIB(searchDto.getYear());
        }
        if (getNumberIndividual(searchDto.getYear()) != null) {
            totalIndividual += getNumberIndividual(searchDto.getYear());
        }
        if (getNumberIndividualIIB(searchDto.getYear()) != null) {
            totalIndividual += getNumberIndividualIIB(searchDto.getYear());
        }
        if (getNumberIndividualDVRTT(searchDto.getYear()) != null) {
            totalIndividual += getNumberIndividualDVRTT(searchDto.getYear());
        }
        if (getNumberFarm(searchDto.getYear()) != null) {
            totalFarm += getNumberFarm(searchDto.getYear());
        }
        if (getNumberFarmIB(searchDto.getYear()) != null) {
            totalFarm += getNumberFarmIB(searchDto.getYear());
        }
        if (getNumberFarmIIB(searchDto.getYear()) != null) {
            totalFarm += getNumberFarmIIB(searchDto.getYear());
        }
        if (getNumberFarmDVRTT(searchDto.getYear()) != null) {
            totalFarm += getNumberFarmDVRTT(searchDto.getYear());
        }
        if (getNumberSpecies(searchDto.getYear()) != null) {
            totalSpecies += getNumberSpecies(searchDto.getYear());
        }
        if (getNumberSpeciesIB(searchDto.getYear()) != null) {
            totalSpecies += getNumberSpeciesIB(searchDto.getYear());
        }
        if (getNumberSpeciesIIB(searchDto.getYear()) != null) {
            totalSpecies += getNumberSpeciesIIB(searchDto.getYear());
        }
        if (getNumberSpeciesDVRTT(searchDto.getYear()) != null) {
            totalSpecies += getNumberSpeciesDVRTT(searchDto.getYear());
        }
        dto.setTotalIndividual(NumberUtils.convertNumberToString(totalIndividual));
        dto.setTotalFarm(NumberUtils.convertNumberToString(totalFarm));
        dto.setTotalSpecies(NumberUtils.convertNumberToString(totalSpecies));
        if (totalFarmProvidedCodeNumberOfGoverment(searchDto.getYear()) != null) {
            dto.setTotalFarmProvidedCodeNumberOfGoverment(NumberUtils.convertNumberToString(totalFarmProvidedCodeNumberOfGoverment(searchDto.getYear())));
        } else {
            dto.setTotalFarmProvidedCodeNumberOfGoverment("0");
        }
        if (farmProvidedCodeInYearNumberOfGoverment(searchDto.getYear()) != null) {
            dto.setTotalFarmProvidedCodeNumberInYearOfGoverment(NumberUtils.convertNumberToString(farmProvidedCodeInYearNumberOfGoverment(searchDto.getYear())));
        } else {
            dto.setTotalFarmProvidedCodeNumberInYearOfGoverment("0");
        }
        return dto;
    }











}
